# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- dev
  
stages:
- stage: Build 
  jobs:
  - job: Build 
    pool:
      name: dev
      demands:
      - Agent.Name -equals centos
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'
    
    - script: |
        npm install
        npm test
      displayName: 'build and test'
    
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'

    - task: DownloadSecureFile@1
      condition: eq(variables['build.sourceBranch'], 'refs/heads/dev')
      name: env_dev
      displayName: 'Download env file'
      inputs:
        secureFile: 'env.dev.env'

    - task: DownloadSecureFile@1
      condition: eq(variables['build.sourceBranch'], 'refs/heads/master')
      name: env_prod
      displayName: 'Download env file'
      inputs:
        secureFile: 'env.prod.env'
  
    - task: CopyFiles@2
      displayName: 'Copy env file'
      inputs:
        sourceFolder: $(Agent.TempDirectory)
        contents: '*.env'
        targetFolder: $(Build.SourcesDirectory)
    
    - script: |
        echo $sourceVersion
        commitHash=${sourceVersion:0:7}
        echo $commitHash
        echo "##vso[task.setvariable variable=commitHash]$commitHash" ## Set variable for using in other tasks.
      env: { sourceVersion: $(Build.SourceVersion) }
      displayName: Get Git Hash 7-digit
  
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: $(Build.SourcesDirectory)
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-$(build.sourceBranchName)-$(commitHash).zip
        replaceExistingArchive: true
      displayName: 'Archive build Artifacts'      
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)
        ArtifactName: $(build.sourceBranchName)
        publishLocation: 'Container'
      displayName: 'Publish Artifacts'

- stage: image_build
  dependsOn: [build]
  jobs:
    - job: image_build_scan 
      pool:
        name: dev
        demands:
        - Agent.Name -equals centos
      steps:
      - script: |
          echo $sourceVersion
          commitHash=${sourceVersion:0:7}
          echo $commitHash
          echo "##vso[task.setvariable variable=commitHash]$commitHash" ## Set variable for using in other tasks.
        env: { sourceVersion: $(Build.SourceVersion) }
        displayName: Get Git Hash 7-digit

      - task: Docker@2
        displayName: Build an image
        inputs:
          command: "build"
          Dockerfile: "Dockerfile"
          repository: "nodeapp"
          tags: |
            latest
            $(commitHash)

      - task: CmdLine@2
        displayName: Scan for reports
        inputs:
          script: |
            docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v "$(pwd):/src" \
            aquasec/trivy \
            image \
            --exit-code 0 \
            --severity LOW,MEDIUM,HIGH \
            --format template --template "@contrib/junit.tpl" \
            -o src/junit-report-low-med-high.xml \
            --ignore-unfixed \
            --security-checks vuln \
            nodeapp:$(commitHash)
              
            docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v "$(pwd):/src" \
            aquasec/trivy \
            image \
            --exit-code 0 \
            --severity CRITICAL \
            --format template --template "@contrib/junit.tpl" \
            -o src/junit-report-crit.xml \
            --ignore-unfixed \
            --security-checks vuln \
            nodeapp:$(commitHash)

      - task: PublishTestResults@2
        displayName: Publish Test Results
        inputs:
          testResultsFormat: "JUnit" # Options: JUnit, NUnit, VSTest, xUnit, cTest
          testResultsFiles: "**/junit-report-*.xml"